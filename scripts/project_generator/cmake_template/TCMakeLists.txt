CMAKE_MINIMUM_REQUIRED( %MIN_CMAKE_VERSION% )
PROJECT( %PROJECT_NAME% )
SET ( %PROJECT_NAME%_VERSION_MAJOR 0 )
SET ( %PROJECT_NAME%_VERSION_MINOR 1 )
SET ( %PROJECT_NAME%_VERSION_PATCH 0 )
SET ( %PROJECT_NAME%_VERSION ${%PROJECT_NAME%_VERSION_MAJOR}.${%PROJECT_NAME%_VERSION_MINOR}.${%PROJECT_NAME%_VERSION_PATCH} )
SET ( PROJECT_VERSION "${%PROJECT_NAME%_VERSION}" )

if( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )
    find_package(Threads)
endif()

add_definitions( -D%PROJECT_NAME%_BUILD )
add_definitions( -D_VARIADIC_MAX=10 )

INCLUDE_DIRECTORIES(
  ./
  ./src
	3dparty/osre/include
	3dparty/osre/3dparty/assimp/include
	3dparty/osre/3dparty/cppcore/include
	3dparty/osre/3dparty/glm
)

link_directories(
  $ENV{SDL_PATH}/lib/x86
  ./lib
)

SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/lib )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin )

if( WIN32 AND NOT CYGWIN )
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc" )  # Force to always compile with W4
  if( CMAKE_CXX_FLAGS MATCHES "/W[0-4]" )
    string( REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
  else()
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4" )
  endif()
elseif( CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic -std=c++0x")
elseif ( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" )
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic -std=c++11")
endif()

ADD_SUBDIRECTORY( 3dparty/osre )

SET ( app_src
	src/main.cpp
)

SOURCE_GROUP( src\\App    FILES ${app_src} )

ADD_EXECUTABLE( %PROJECT_NAME_EXE%
    ${app_src}
)

target_link_libraries ( %PROJECT_NAME% osre )
